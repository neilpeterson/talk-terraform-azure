variables:
- group: azure-credentials

pool:
  name: Hosted Ubuntu 1604

steps:
- script: |
   apt-get update
   apt-get -y upgrade
   wget https://dl.google.com/go/go1.12.2.linux-amd64.tar.gz
   sudo tar -xvf go1.12.2.linux-amd64.tar.gz
   sudo mv go /usr/local
   export GOPATH=$(Build.Repository.LocalPath)
  displayName: 'Install Go on Build Agent'

- script: |
   curl --location --silent --fail --show-error -o terratest_log_parser https://github.com/gruntwork-io/terratest/releases/download/v0.13.13/terratest_log_parser_linux_amd64
   chmod +x terratest_log_parser
   sudo mv terratest_log_parser /usr/local/bin
  displayName: 'Install Terratest Utilities'

- script: |
   # cd terraform-config
   terraform init -backend=false terraform-config/
  displayName: 'Terraform Init'

- script: |
   # cd modules/hello-world
   terraform validate terraform-config/
  displayName: 'Terraform Validate'

- script: |
   export GOPATH=$(Build.Repository.LocalPath)
   cd test
   go get github.com/gruntwork-io/terratest/modules/terraform
   go test | tee test_output.log
   terratest_log_parser -testlog test_output.log -outputdir test_output
  displayName: 'Run Terraform Tests'
  env:
   # ARM_ACCESS_KEY: $(ARM_ACCESS_KEY)
   ARM_CLIENT_ID: $(internal-client-id)
   ARM_CLIENT_SECRET: $(internal-secret)
   ARM_TENANT_ID: $(internal-tenant-id)
   ARM_SUBSCRIPTION_ID: $(internal-subscription-id)

# - script: |
#    cd modules/hello-world
#    rm -rf .terraform
#    rm terraform.tfstate
#    rm terraform.tfstate.backup
#   displayName: 'Scrub Terraform Artifacts'

- task: CmdLine@2
  displayName: 'List files'
  inputs:
    script: 'ls /home/vsts/work/1/s/test/test_output/'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'NUnit'
    testResultsFiles: '/home/vsts/work/1/s/test/test_output2/report.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    testRunTitle: 'Terraform Tests'

- task: PublishPipelineArtifact@0
  displayName: 'Publish Terraform Artifacts'
  inputs:
    targetPath: .