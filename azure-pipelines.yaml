trigger:

  branches:
    include:
    - master

pr:
- master

variables:
- group: azure-credentials

stages:

- stage: test
  jobs:
  - job: test

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - script: |
        terraform init -backend=false terraform-config/
      displayName: 'Terraform Init'

    - script: |
        terraform validate
      displayName: 'Terraform Validate'

    - script: |
        terraform plan -var="resource_group=hello-world-$(Build.BuildId)" --out plan.out terraform-config/
      env:
        ARM_CLIENT_ID: $(internal-client-id)
        ARM_CLIENT_SECRET: $(internal-secret)
        ARM_TENANT_ID: $(internal-tenant-id)
        ARM_SUBSCRIPTION_ID: $(internal-subscription-id)
      displayName: 'Terraform Plan'

    - script: |
        terraform apply plan.out
      env:
        ARM_CLIENT_ID: $(internal-client-id)
        ARM_CLIENT_SECRET: $(internal-secret)
        ARM_TENANT_ID: $(internal-tenant-id)
        ARM_SUBSCRIPTION_ID: $(internal-subscription-id)
      displayName: 'Terraform Apply'

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ca-nepeters-demo-test (3762d87c-ddb8-425f-b2fc-29e5e859edaf)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          IP=$(az container show --resource-group hello-world-$(Build.BuildId) --name HelloWorld --query ipAddress.ip -o tsv)
          
          echo "##vso[task.setvariable variable=IP;]$IP"

    - script: |
        echo $IP
      displayName: 'Echo IP'

    - task: PowerShell@2
      displayName: Install Pester
      inputs:
        targetType: 'inline'
        script: |
          Find-Module pester | Install-Module -Force

    - task: PowerShell@2
      displayName: Run Pester tests
      inputs:
        targetType: 'inline'
        script: 'invoke-pester -Script @{ Path = ''./test/''; Parameters = @{ webSite = ''$(IP)'' }} -OutputFile "./test-results.xml" -OutputFormat ''NUnitXML'''

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFormat: 'NUnit'
        testResultsFiles: '**/test-results.xml'
        failTaskOnFailedTests: true

- stage: Clean Up
  condition: always()
  jobs:
  - job: cleanUp 

    pool:
      name: Hosted Ubuntu 1604

    steps:

    - task: AzureCLI@2
      inputs:
        azureSubscription: 'ca-nepeters-demo-test (3762d87c-ddb8-425f-b2fc-29e5e859edaf)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az group delete --name hello-world-$(Build.BuildId) --yes'

    

